"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è PDF Merger Pro
"""

import os
from PyQt6.QtWidgets import QListWidget, QLabel
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QDragEnterEvent, QDropEvent


class PDFListWidget(QListWidget):
    """–°–ø–∏—Å–æ–∫ PDF —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π drag & drop."""

    def __init__(self):
        super().__init__()
        self.setAcceptDrops(True)
        self.setDragDropMode(QListWidget.DragDropMode.InternalMove)
        self.setDefaultDropAction(Qt.DropAction.MoveAction)

        # –£–ª—É—á—à–µ–Ω–Ω—ã–π placeholder –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
        self.setStyleSheet("""
            QListWidget {
                border: 2px dashed #adb5bd;
                border-radius: 12px;
                background-color: #f8f9fa;
                color: #6c757d;
                font-size: 14px;
                text-align: center;
                padding: 40px;
            }
            QListWidget:focus {
                border-color: #667eea;
                background-color: #f8f9fa;
            }
        """)

        # –î–æ–±–∞–≤–ª—è–µ–º placeholder —Ç–µ–∫—Å—Ç
        self.placeholder_text = "üìÅ –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã —Å—é–¥–∞\n(PDF, Word, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ç–µ–∫—Å—Ç)\n–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã'"
        self.update_placeholder()

    def update_placeholder(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ placeholder —Ç–µ–∫—Å—Ç–∞"""
        if self.count() == 0:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º placeholder
            self.setStyleSheet("""
                QListWidget {
                    border: 2px dashed #adb5bd;
                    border-radius: 12px;
                    background-color: #f8f9fa;
                    color: #6c757d;
                    font-size: 14px;
                    text-align: center;
                    padding: 40px;
                }
                QListWidget:focus {
                    border-color: #667eea;
                    background-color: #f8f9fa;
                }
            """)
        else:
            # –û–±—ã—á–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
            self.setStyleSheet("")

    def addItem(self, item):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è placeholder"""
        super().addItem(item)
        self.update_placeholder()

    def clear(self):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è placeholder"""
        super().clear()
        self.update_placeholder()

    def takeItem(self, row):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è placeholder"""
        result = super().takeItem(row)
        self.update_placeholder()
        return result

    def dragEnterEvent(self, event: QDragEnterEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏"""
        mime_data = event.mimeData()
        if mime_data and mime_data.hasUrls():
            event.accept()
        else:
            event.ignore()

    def dropEvent(self, event: QDropEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∞–π–ª–æ–≤"""
        mime_data = event.mimeData()
        if mime_data and mime_data.hasUrls():
            files = []
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            supported_extensions = ['.pdf', '.doc', '.docx', '.txt', '.jpg', '.jpeg', '.png', '.bmp']

            for url in mime_data.urls():
                if url.isLocalFile():
                    file_path = url.toLocalFile()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                    if any(file_path.lower().endswith(ext) for ext in supported_extensions):
                        files.append(file_path)

            if files:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
                existing_files = []
                for i in range(self.count()):
                    item = self.item(i)
                    if item:
                        existing_files.append(item.text())
                for file_path in files:
                    if file_path and file_path not in existing_files:
                        self.addItem(file_path)
                event.accept()
            else:
                event.ignore()
        else:
            super().dropEvent(event)


class StatusWidget(QLabel):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å –∏–∫–æ–Ω–∫–æ–π."""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setObjectName('status')
        self.setText('–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ')

    def set_status(self, text, status_type='info'):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å—Ç–∏–ª–µ–º."""
        self.setText(text)

        color_map = {
            'info': '#17a2b8',
            'success': '#28a745',
            'warning': '#ffc107',
            'error': '#dc3545',
            'processing': '#6f42c1'
        }

        color = color_map.get(status_type, '#17a2b8')
        self.setStyleSheet(f"""
            QLabel#status {{
                color: {color};
                font-size: 13px;
                font-family: 'Segoe UI', Arial, sans-serif;
                font-weight: 500;
                padding: 8px 12px;
                background-color: white;
                border-radius: 6px;
                border: 1px solid #e9ecef;
            }}
        """)


class FileCountWidget(QLabel):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤."""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setStyleSheet("""
            color: #6c757d;
            font-size: 12px;
            font-weight: 500;
            background-color: #e9ecef;
            padding: 4px 8px;
            border-radius: 4px;
        """)
        self.update_count(0)

    def update_count(self, count):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤."""
        self.setText(f'–§–∞–π–ª–æ–≤: {count}')

        # –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if count == 0:
            bg_color = '#e9ecef'
            text_color = '#6c757d'
        elif count == 1:
            bg_color = '#fff3cd'
            text_color = '#856404'
        else:
            bg_color = '#d4edda'
            text_color = '#155724'

        self.setStyleSheet(f"""
            color: {text_color};
            font-size: 12px;
            font-weight: 500;
            background-color: {bg_color};
            padding: 4px 8px;
            border-radius: 4px;
        """)


class CompactButton:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–∫—Ç–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫."""

    @staticmethod
    def create_button(text, icon_name=None, color='#495057', style_type='normal'):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."""
        from PyQt6.QtWidgets import QPushButton
        import qtawesome as qta

        button = QPushButton(text)

        if icon_name:
            button.setIcon(qta.icon(icon_name, color=color))

        style_map = {
            'success': {'border': '#28a745', 'hover': '#28a745'},
            'info': {'border': '#17a2b8', 'hover': '#17a2b8'},
            'warning': {'border': '#ffc107', 'hover': '#ffc107'},
            'danger': {'border': '#dc3545', 'hover': '#dc3545'},
            'normal': {'border': '#e9ecef', 'hover': '#6c757d'}
        }

        style = style_map.get(style_type, style_map['normal'])

        button.setStyleSheet(f"""
            QPushButton {{
                border-color: {style['border']};
                color: {color};
            }}
            QPushButton:hover {{
                background-color: {style['hover']};
                color: white;
            }}
        """)

        return button
