"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è PDF Merger Pro
"""

import os
from PyQt6.QtWidgets import (QMainWindow, QVBoxLayout, QHBoxLayout, QWidget,
                             QPushButton, QFileDialog, QMessageBox, QLabel)
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QFont
import qtawesome as qta

from .widgets import PDFListWidget, StatusWidget, FileCountWidget, CompactButton
from .styles import APP_STYLES
from .preview_dialogs import PDFPreviewDialog, MultiPreviewDialog
from core.pdf_worker import PDFMergerWorker, PDFValidator, PDFInfo
from core.file_converter import FileConverter


class PDFMergerMainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è PDF Merger Pro."""

    def __init__(self):
        super().__init__()
        self.worker = None
        self.file_converter = FileConverter()
        self.temp_files = []  # –°–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        self.init_ui()
        self.setup_connections()

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        self.setWindowTitle('PDF Merger Pro')
        self.setGeometry(50, 30, 650, 600)
        self.setMinimumSize(600, 500)
        self.setMaximumSize(800, 700)
        self.setStyleSheet(APP_STYLES)

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π layout –¥–ª—è –Ω–∏–∑–∫–∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        main_layout = QVBoxLayout(central_widget)
        main_layout.setSpacing(10)
        main_layout.setContentsMargins(16, 12, 16, 12)

        # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_header(main_layout)
        self.create_file_list(main_layout)
        self.create_file_controls(main_layout)
        self.create_action_controls(main_layout)
        self.create_status_bar(main_layout)

    def create_header(self, main_layout):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        header_layout = QHBoxLayout()
        header_layout.setSpacing(16)

        # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∏–∫–æ–Ω–∫–∞
        icon_label = QLabel()
        icon_size = 32
        qt_icon = qta.icon('fa5s.file-pdf', color='#667eea')
        icon_pixmap = qt_icon.pixmap(icon_size, icon_size)
        icon_label.setPixmap(icon_pixmap)
        header_layout.addWidget(icon_label)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel('PDF Merger Pro')
        title_label.setObjectName('title')
        header_layout.addWidget(title_label)

        header_layout.addStretch()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏
        version_label = QLabel('v2.2')
        version_label.setStyleSheet("""
            color: #adb5bd;
            font-size: 12px;
            font-weight: 500;
            background-color: #f8f9fa;
            padding: 4px 8px;
            border-radius: 4px;
        """)
        header_layout.addWidget(version_label)

        main_layout.addLayout(header_layout)

        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle_label = QLabel('–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã (PDF, Word, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ç–µ–∫—Å—Ç) –≤ –æ–±–ª–∞—Å—Ç—å –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏')
        subtitle_label.setObjectName('subtitle')
        main_layout.addWidget(subtitle_label)

    def create_file_list(self, main_layout):
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤."""
        self.file_list = PDFListWidget()
        self.file_list.setMinimumHeight(180)
        self.file_list.setMaximumHeight(250)
        self.file_list.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        self.file_list.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        main_layout.addWidget(self.file_list)

    def create_file_controls(self, main_layout):
        """–°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏."""
        file_controls_group = QWidget()
        file_controls_group.setObjectName('button_group')
        file_controls_layout = QVBoxLayout(file_controls_group)
        file_controls_layout.setContentsMargins(0, 0, 0, 0)
        file_controls_layout.setSpacing(6)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã
        controls_title = QLabel('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏')
        controls_title.setStyleSheet("""
            color: #495057;
            font-size: 14px;
            font-weight: 600;
            margin-bottom: 8px;
        """)
        file_controls_layout.addWidget(controls_title)

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        main_controls_layout = QHBoxLayout()
        main_controls_layout.setSpacing(8)

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        self.add_btn = CompactButton.create_button(
            '–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã', 'fa5s.plus', '#28a745', 'success'
        )
        self.add_btn.clicked.connect(self.add_files)
        main_controls_layout.addWidget(self.add_btn)

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        self.preview_btn = CompactButton.create_button(
            '–ü—Ä–æ—Å–º–æ—Ç—Ä', 'fa5s.eye', '#17a2b8', 'info'
        )
        self.preview_btn.clicked.connect(self.preview_pdf)
        main_controls_layout.addWidget(self.preview_btn)

        main_controls_layout.addStretch()

        # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        move_controls_layout = QHBoxLayout()
        move_controls_layout.setSpacing(8)

        self.move_up_btn = QPushButton()
        self.move_up_btn.setIcon(qta.icon('fa5s.arrow-up', color='#6c757d'))
        self.move_up_btn.setToolTip('–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö')
        self.move_up_btn.clicked.connect(self.move_up)
        self.move_up_btn.setFixedSize(40, 40)
        move_controls_layout.addWidget(self.move_up_btn)

        self.move_down_btn = QPushButton()
        self.move_down_btn.setIcon(qta.icon('fa5s.arrow-down', color='#6c757d'))
        self.move_down_btn.setToolTip('–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑')
        self.move_down_btn.clicked.connect(self.move_down)
        self.move_down_btn.setFixedSize(40, 40)
        move_controls_layout.addWidget(self.move_down_btn)

        main_controls_layout.addLayout(move_controls_layout)
        file_controls_layout.addLayout(main_controls_layout)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        secondary_controls_layout = QHBoxLayout()
        secondary_controls_layout.setSpacing(8)

        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        self.remove_btn = CompactButton.create_button(
            '–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π', 'fa5s.trash', '#dc3545', 'danger'
        )
        self.remove_btn.clicked.connect(self.remove_file)
        secondary_controls_layout.addWidget(self.remove_btn)

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        self.clear_btn = CompactButton.create_button(
            '–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ', 'fa5s.broom', '#856404', 'warning'
        )
        self.clear_btn.clicked.connect(self.clear_list)
        secondary_controls_layout.addWidget(self.clear_btn)

        secondary_controls_layout.addStretch()
        file_controls_layout.addLayout(secondary_controls_layout)

        main_layout.addWidget(file_controls_group)

    def create_action_controls(self, main_layout):
        """–°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π."""
        action_group = QWidget()
        action_group.setObjectName('button_group')
        action_layout = QVBoxLayout(action_group)
        action_layout.setContentsMargins(0, 0, 0, 0)
        action_layout.setSpacing(6)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
        action_title = QLabel('–î–µ–π—Å—Ç–≤–∏—è')
        action_title.setStyleSheet("""
            color: #495057;
            font-size: 14px;
            font-weight: 600;
            margin-bottom: 8px;
        """)
        action_layout.addWidget(action_title)

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        self.preview_all_btn = QPushButton('üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤')
        self.preview_all_btn.setObjectName('preview_all_btn')
        self.preview_all_btn.setIcon(qta.icon('fa5s.eye', color='white'))
        self.preview_all_btn.clicked.connect(self.preview_all_pdfs)
        action_layout.addWidget(self.preview_all_btn)

        # –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
        self.merge_btn = QPushButton('üöÄ –û–±—ä–µ–¥–∏–Ω–∏—Ç—å PDF —Ñ–∞–π–ª—ã')
        self.merge_btn.setObjectName('merge_btn')
        self.merge_btn.setIcon(qta.icon('fa5s.magic', color='white'))
        self.merge_btn.clicked.connect(self.merge_pdfs)
        action_layout.addWidget(self.merge_btn)

        main_layout.addWidget(action_group)

    def create_status_bar(self, main_layout):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞."""
        status_group = QWidget()
        status_layout = QHBoxLayout(status_group)
        status_layout.setContentsMargins(16, 12, 16, 12)
        status_layout.setSpacing(12)

        # –ò–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        self.status_icon = QLabel()
        status_icon_pixmap = qta.icon('fa5s.check-circle', color='#28a745').pixmap(16, 16)
        self.status_icon.setPixmap(status_icon_pixmap)
        status_layout.addWidget(self.status_icon)

        # –í–∏–¥–∂–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
        self.status_widget = StatusWidget()
        status_layout.addWidget(self.status_widget)

        status_layout.addStretch()

        # –°—á–µ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤
        self.file_count_widget = FileCountWidget()
        status_layout.addWidget(self.file_count_widget)

        main_layout.addWidget(status_group)

    def setup_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤."""
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞
        self.file_list.itemChanged.connect(self.update_info)
        self.file_list.itemSelectionChanged.connect(self.update_buttons)

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –º–æ–¥–µ–ª–∏
        model = self.file_list.model()
        if model:
            model.rowsInserted.connect(self.update_info)
            model.rowsRemoved.connect(self.update_info)

        # –ù–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        self.update_info()
        self.update_buttons()

    def add_files(self):
        """–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤."""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        files, _ = QFileDialog.getOpenFileNames(
            self,
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è',
            '',
            FileConverter.get_file_filter()
        )

        if files:
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
            existing_files = []
            for i in range(self.file_list.count()):
                item = self.file_list.item(i)
                if item:
                    existing_files.append(item.text())

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            added_count = 0
            converted_count = 0

            for file_path in files:
                if file_path not in existing_files:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ñ–æ—Ä–º–∞—Ç–∞
                    if not FileConverter.is_supported_format(file_path):
                        QMessageBox.warning(
                            self,
                            '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç',
                            f'–§–∞–π–ª {os.path.basename(file_path)} –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç'
                        )
                        continue

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ PDF –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    success, result = self.file_converter.convert_to_pdf(file_path)

                    if success:
                        pdf_path = result

                        # –ï—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (–Ω–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π PDF)
                        if pdf_path != file_path:
                            converted_count += 1
                            self.temp_files.append(pdf_path)

                        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª—É—á–∏–≤—à–∏–π—Å—è PDF
                        is_valid, message = PDFValidator.is_valid_pdf(pdf_path)
                        if is_valid:
                            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –≤ —Å–ø–∏—Å–æ–∫ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
                            # –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ PDF –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
                            self.file_list.addItem(file_path)
                            added_count += 1
                        else:
                            QMessageBox.warning(
                                self,
                                '–û—à–∏–±–∫–∞ —Ñ–∞–π–ª–∞',
                                f'–§–∞–π–ª {os.path.basename(file_path)}:\n{message}'
                            )
                            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
                            if pdf_path != file_path and pdf_path in self.temp_files:
                                self.temp_files.remove(pdf_path)
                                try:
                                    os.remove(pdf_path)
                                except Exception:
                                    pass
                    else:
                        # –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                        error_message = result
                        QMessageBox.warning(
                            self,
                            '–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏',
                            f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª {os.path.basename(file_path)}:\n{error_message}'
                        )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if added_count > 0:
                status_msg = f'–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {added_count}'
                if converted_count > 0:
                    status_msg += f' (—Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {converted_count})'
                self.status_widget.set_status(status_msg, 'success')

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
                missing_deps = self.file_converter.get_missing_dependencies()
                if missing_deps and converted_count == 0:
                    QMessageBox.information(
                        self,
                        '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö',
                        f'–î–ª—è –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:\n' +
                        '\n'.join([f'‚Ä¢ pip install {dep.split()[0].lower()}' for dep in missing_deps])
                    )

    def remove_file(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª."""
        current_row = self.file_list.currentRow()
        if current_row >= 0:
            item = self.file_list.takeItem(current_row)
            if item:
                self.status_widget.set_status(f'–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {os.path.basename(item.text())}', 'info')

    def clear_list(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤."""
        if self.file_list.count() > 0:
            reply = QMessageBox.question(
                self,
                '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
                '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞?',
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            )

            if reply == QMessageBox.StandardButton.Yes:
                count = self.file_list.count()
                self.file_list.clear()
                self.status_widget.set_status(f'–£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {count}', 'info')

    def move_up(self):
        """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª –≤–≤–µ—Ä—Ö."""
        current_row = self.file_list.currentRow()
        if current_row > 0:
            item = self.file_list.takeItem(current_row)
            self.file_list.insertItem(current_row - 1, item)
            self.file_list.setCurrentRow(current_row - 1)

    def move_down(self):
        """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª –≤–Ω–∏–∑."""
        current_row = self.file_list.currentRow()
        if current_row >= 0 and current_row < self.file_list.count() - 1:
            item = self.file_list.takeItem(current_row)
            self.file_list.insertItem(current_row + 1, item)
            self.file_list.setCurrentRow(current_row + 1)

    def preview_pdf(self):
        """–û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ PDF —Ñ–∞–π–ª–∞."""
        current_row = self.file_list.currentRow()
        if current_row >= 0:
            item = self.file_list.item(current_row)
            if item:
                file_path = item.text()

                if not os.path.exists(file_path):
                    QMessageBox.warning(
                        self,
                        '–û—à–∏–±–∫–∞',
                        f'–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {os.path.basename(file_path)}'
                    )
                    return

                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                preview_dialog = PDFPreviewDialog(self, file_path)
                preview_dialog.exec()

    def preview_all_pdfs(self):
        """–û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö PDF —Ñ–∞–π–ª–æ–≤."""
        file_paths = []
        for i in range(self.file_list.count()):
            item = self.file_list.item(i)
            if item:
                file_paths.append(item.text())

        if not file_paths:
            QMessageBox.information(
                self,
                '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                '–î–æ–±–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞'
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PyMuPDF
        try:
            import fitz
        except ImportError:
            QMessageBox.warning(
                self,
                '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å',
                '–î–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PyMuPDF:\npip install PyMuPDF'
            )
            return

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –º—É–ª—å—Ç–∏–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        try:
            preview_dialog = MultiPreviewDialog(self, file_paths)
            preview_dialog.exec()
        except Exception as e:
            QMessageBox.critical(
                self,
                '–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞',
                f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n{str(e)}'
            )

    def merge_pdfs(self):
        """–û–±—ä–µ–¥–∏–Ω–∏—Ç—å PDF —Ñ–∞–π–ª—ã."""
        original_paths = []
        pdf_paths = []

        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏ –∏—Ö PDF –≤–µ—Ä—Å–∏—è–º
        for i in range(self.file_list.count()):
            item = self.file_list.item(i)
            if item:
                original_path = item.text()
                original_paths.append(original_path)

                # –ï—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º PDF –≤–µ—Ä—Å–∏—é
                if original_path.lower().endswith('.pdf'):
                    pdf_paths.append(original_path)
                else:
                    # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π PDF —Ñ–∞–π–ª
                    success, pdf_path = self.file_converter.convert_to_pdf(original_path)
                    if success:
                        pdf_paths.append(pdf_path)
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç
                        if pdf_path not in self.temp_files:
                            self.temp_files.append(pdf_path)
                    else:
                        QMessageBox.warning(
                            self,
                            '–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏',
                            f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ñ–∞–π–ª {os.path.basename(original_path)} –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è'
                        )
                        return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è PDF —Ñ–∞–π–ª–æ–≤
        is_valid, message = PDFValidator.validate_file_list(pdf_paths)
        if not is_valid:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', message)
            return

        # –í—ã–±–æ—Ä –º–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        output_file, _ = QFileDialog.getSaveFileName(
            self,
            '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π PDF',
            'merged_document.pdf',
            'PDF —Ñ–∞–π–ª—ã (*.pdf)'
        )

        if output_file:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ —Å PDF —Ñ–∞–π–ª–∞–º–∏
            self.worker = PDFMergerWorker(pdf_paths, output_file)
            self.worker.started.connect(self.merging_started)
            self.worker.finished.connect(self.merging_finished)
            self.worker.error.connect(self.merging_error)
            self.worker.start()

    def update_info(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö."""
        count = self.file_list.count()
        self.file_count_widget.update_count(count)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if not hasattr(self, 'worker') or not (self.worker and self.worker.isRunning()):
            if count == 0:
                self.status_widget.set_status('–î–æ–±–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã', 'info')
                self.status_icon.setPixmap(qta.icon('fa5s.info-circle', color='#17a2b8').pixmap(16, 16))
            elif count == 1:
                self.status_widget.set_status('–î–æ–±–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è', 'warning')
                self.status_icon.setPixmap(qta.icon('fa5s.exclamation-triangle', color='#ffc107').pixmap(16, 16))
            else:
                self.status_widget.set_status('–ì–æ—Ç–æ–≤ –∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—é', 'success')
                self.status_icon.setPixmap(qta.icon('fa5s.check-circle', color='#28a745').pixmap(16, 16))

    def update_buttons(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫."""
        count = self.file_list.count()
        current_row = self.file_list.currentRow()
        has_selection = current_row >= 0
        is_working = hasattr(self, 'worker') and self.worker and self.worker.isRunning()

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏
        self.add_btn.setEnabled(not is_working)
        self.remove_btn.setEnabled(has_selection and not is_working)
        self.clear_btn.setEnabled(count > 0 and not is_working)
        self.move_up_btn.setEnabled(has_selection and current_row > 0 and not is_working)
        self.move_down_btn.setEnabled(has_selection and current_row < count - 1 and not is_working)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        self.preview_btn.setEnabled(has_selection and not is_working)
        self.preview_all_btn.setEnabled(count > 0 and not is_working)
        self.merge_btn.setEnabled(count >= 2 and not is_working)

    def merging_started(self):
        """–°–ª–æ—Ç, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è."""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
        try:
            import fitz
            merge_method = "PyMuPDF (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –∫–∏—Ä–∏–ª–∏—Ü—ã)"
        except ImportError:
            merge_method = "PyPDF2 (–±–∞–∑–æ–≤—ã–π)"

        self.status_widget.set_status(f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ ({merge_method})...", 'processing')
        self.status_icon.setPixmap(qta.icon('fa5s.spinner', color='#6f42c1').pixmap(16, 16))
        self.update_buttons()

    def merging_finished(self, output_file):
        """–°–ª–æ—Ç, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è."""
        self.worker = None
        self.status_widget.set_status("–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!", 'success')
        self.status_icon.setPixmap(qta.icon('fa5s.check-circle', color='#28a745').pixmap(16, 16))
        self.update_buttons()

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        self.cleanup_temp_files()

        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        msg = QMessageBox(self)
        msg.setIcon(QMessageBox.Icon.Information)
        msg.setWindowTitle('–£—Å–ø–µ—à–Ω–æ!')
        msg.setText('PDF —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã!')
        msg.setInformativeText(f'–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:\n{output_file}')
        msg.setStandardButtons(QMessageBox.StandardButton.Ok)
        msg.exec()

    def merging_error(self, error_message):
        """–°–ª–æ—Ç, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è."""
        self.worker = None
        self.status_widget.set_status("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏", 'error')
        self.status_icon.setPixmap(qta.icon('fa5s.exclamation-circle', color='#dc3545').pixmap(16, 16))
        self.update_buttons()

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        self.cleanup_temp_files()

        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        msg = QMessageBox(self)
        msg.setIcon(QMessageBox.Icon.Critical)
        msg.setWindowTitle('–û—à–∏–±–∫–∞')
        msg.setText('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤')
        msg.setInformativeText(error_message)
        msg.setStandardButtons(QMessageBox.StandardButton.Ok)
        msg.exec()

    def cleanup_temp_files(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã."""
        for temp_file in self.temp_files:
            try:
                if os.path.exists(temp_file):
                    os.remove(temp_file)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_file}: {e}")

        self.temp_files.clear()
        self.file_converter.cleanup_temp_files()

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        self.cleanup_temp_files()
        event.accept()
